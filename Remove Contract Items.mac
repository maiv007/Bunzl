[PCOMM SCRIPT HEADER]
LANGUAGE=VBSCRIPT
DESCRIPTION=
[PCOMM SCRIPT SOURCE]
OPTION EXPLICIT
autECLSession.SetConnectionByName(ThisSessionName)

REM Author: Joseph Bajcar
REM COPYRIGHT AUGUST 2018
REM Date Last Revised: October 24, 2017
REM This line calls the macro subroutine
REM This is the property of Joseph Bajcar. Any unauthorized use will result in legal action.
main

sub main()
	'*******Variables*******
	Dim aFile, myFile, filePath
	Dim vaMyArray, objLine, strInfo, x, y
	Dim arraySize, rows, columns
	Dim dataArray : dataArray = Array()
	Dim tempString
	Const ForReading = 1
	'*******Declarations*******
	columns = 11
	filePath = "C:\Users\jbajcar\AppData\Roaming\IBM\Client Access\Emulator\private\CSV_MassUploadContractMacroTemplate-DEV SF.csv"
	'**************************
	
	'******Calculate file size in ROWS******
	Call CreateFile(aFile, myFile, filePath, objLine) 'load in CSV file
	Call FindFileSize(rows, objLine, strInfo, tempString) 'calls function to calculate number of rows in CSV file
	ReDim dataArray(rows, columns) 'redefine array based on CSV file size
	
	'******Load data in CSV file into array******
	Call CreateFile(aFile, myFile, filePath, objLine) 'reloads in CSV files
	Call LoadData(objLine, dataArray, columns, strInfo, vaMyArray, rows) 'load data from CSV file into data array
	
	'******Run AS400 macro program******
	Call RunMacro(dataArray, rows, columns)
	Call MacroComplete()
	
end sub

Function CreateFile(aFile, myFile, filePath, objLine)
	Set aFile = CreateObject("Scripting.FileSystemObject") 'create file object
	Set myFile = aFile.GetFile(filePath) 'create file object with CSV file
	Set objLine = myFile.OpenAsTextStream(1) 'create object to stream data from CSV file
End function

Function FindFileSize(rows, objLine, strInfo, tempString)
	rows = 0
	Do while objLine.AtEndOfStream <> true 'read file until null pointer, end of file/data
		strInfo = objLine.ReadLine
		tempString = Split(strInfo,",")
		if StrComp(tempString(1), " ") = -1 then 'checks to see if the cell is blank and stops ReadIn stream
			Exit do
		end if
		rows = rows + 1
	Loop
	rows = rows - 1
End function

Function LoadData(objLine, dataArray, columns, strInfo, vaMyArray, rows)
	Dim x,y
	x = 0
	Do while objLine.AtEndOfStream <> true 'read file until null pointer, end of file/data
		strInfo =   objLine.ReadLine
		vaMyArray = Split(strInfo, ",")
		For y = 0 to columns-1
			dataArray(x, y) = vaMyArray(y)
		Next
		if x >= rows then exit do
		x = x + 1
	Loop
	
End function

Function RunMacro(dataArray, rows, columns)
	Dim x, check, count, y, z
	Dim message, allClear
	x=1
	message = ""

	Do while x <= rows
		REM MACRO STARTS HERE
		autECLSession.autECLOIA.WaitForAppAvailable 
	
		autECLSession.autECLOIA.WaitForInputReady
		autECLSession.autECLPS.SetCursorPos 14,026
		autECLSession.autECLPS.Wait 10

		autECLSession.autECLOIA.WaitForInputReady
		autECLSession.autECLPS.SendKeys dataArray(x,0) 'enter rebate#
		autECLSession.autECLPS.Wait 10
		
		autECLSession.autECLOIA.WaitForInputReady
		autECLSession.autECLPS.SendKeys "[field+]"
		autECLSession.autECLPS.Wait 10
		
		autECLSession.autECLOIA.WaitForInputReady
		autECLSession.autECLPS.SendKeys "[enter]"
		autECLSession.autECLPS.Wait 100



		REM This is to check if the vendor is valid and skips the line if not instead of stopping the macro
		message = autECLSession.autECLPS.GetText(24, 002, 34)
		if StrComp(message, "* Vendor/Customer Number Not Valid") = 0 then
			autECLSession.autECLPS.SendKeys "[reset]"
			autECLSession.autECLPS.Wait 25
			autECLSession.autECLOIA.WaitForInputReady 
			autECLSession.autECLPS.SetCursorPos 14,026
			autECLSession.autECLPS.Wait 25
			autECLSession.autECLOIA.WaitForInputReady 
			autECLSession.autECLPS.SendKeys "[eraseeof]"
			autECLSession.autECLPS.Wait 25
			message = ""
		else


			autECLSession.autECLOIA.WaitForAppAvailable 
			autECLSession.autECLOIA.WaitForInputReady
			autECLSession.autECLPS.SetCursorPos 01,069
			autECLSession.autECLPS.Wait 10
			
			autECLSession.autECLOIA.WaitForInputReady
			autECLSession.autECLPS.SendKeys dataArray(x,1) 'enter item#
			autECLSession.autECLPS.Wait 10
			
			autECLSession.autECLOIA.WaitForInputReady
			autECLSession.autECLPS.SendKeys "[enter]"
			autECLSession.autECLPS.Wait 50
			
			
			autECLSession.autECLOIA.WaitForAppAvailable
			autECLSession.autECLOIA.WaitForInputReady
			autECLSession.autECLPS.Wait 10
			if StrComp(Replace(autECLSession.autECLPS.GetText(07, 008, 12), " ", ""),dataArray(x,1)) = 0 And StrComp(autECLSession.autECLPS.GetText(07, 073, 6), dataArray(x,8)) = 0 then
				autECLSession.autECLOIA.WaitForInputReady
				autECLSession.autECLPS.SetCursorPos 07,002
				autECLSession.autECLPS.Wait 10
				autECLSession.autECLOIA.WaitForInputReady
				autECLSession.autECLPS.SendKeys "d"
				autECLSession.autECLPS.Wait 10
				autECLSession.autECLOIA.WaitForInputReady
				autECLSession.autECLPS.SendKeys "[enter]"
				autECLSession.autECLPS.Wait 10
			
				if StrComp(Replace(autECLSession.autECLPS.GetText(09, 008, 12), " ", ""),dataArray(x,1)) = 0 And StrComp(autECLSession.autECLPS.GetText(09, 073, 6), dataArray(x,8)) = 0 then
					autECLSession.autECLOIA.WaitForInputReady
					autECLSession.autECLPS.SetCursorPos 09,002
					autECLSession.autECLPS.Wait 10
					autECLSession.autECLOIA.WaitForInputReady
					autECLSession.autECLPS.SendKeys "d"
					autECLSession.autECLPS.Wait 10
					autECLSession.autECLOIA.WaitForInputReady
					autECLSession.autECLPS.SendKeys "[enter]"
					autECLSession.autECLPS.Wait 10
				end if
			end if
			
			autECLSession.autECLOIA.WaitForInputReady
			autECLSession.autECLPS.SendKeys "[pf1]"
			autECLSession.autECLPS.Wait 10
			autECLSession.autECLOIA.WaitForInputReady
			autECLSession.autECLPS.SendKeys "[pf1]"
			autECLSession.autECLPS.Wait 10

			
			autECLSession.autECLOIA.WaitForInputReady
			autECLSession.autECLPS.SendKeys "[pf12]"
			autECLSession.autECLPS.Wait 50
		end if
		
		REM ==================
		x=x+1
	Loop
	
	
End function

Function MacroComplete()
	MsgBox("Update Complete.")
End function

Function MacroFailed()
	MsgBox("Update Not Complete.")
End function
